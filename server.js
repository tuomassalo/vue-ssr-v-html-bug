const fs = require('fs')
const path = require('path')
const express = require('express')
const { createBundleRenderer } = require('vue-server-renderer')

const isProd = process.env.NODE_ENV === 'production'

const resolve = file => path.resolve(__dirname, file)
const serverInfo =
  `express/${require('express/package.json').version} ` +  // eslint-disable-line
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`  // eslint-disable-line

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false,
  }))
}

let renderer
let readyPromise
const app = express()
const templatePath = resolve('./src/index.template.html')
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./dist/vue-ssr-server-bundle.json')  // eslint-disable-line
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')  // eslint-disable-line
  renderer = createRenderer(bundle, {
    template,
    clientManifest,
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')( // eslint-disable-line
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    } // eslint-disable-line
  )
}

const serve = (path, cache) => express.static(resolve(path), {  // eslint-disable-line
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0,
})

const project = '/vue-ssr-v-html-bug'

app.use(`${project}/dist`, serve('./dist', true))
app.use(`${project}/public`, serve('./public', true))

function render (req, res) {
  const s = Date.now()
  const { url } = req

  res.setHeader('Content-Type', 'text/html')
  res.setHeader('Server', serverInfo)

  const handleError = (err) => {
    if (err.url) {
      res.redirect(err.url)
    } else if (err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${url}`) // eslint-disable-line
      console.error(err.stack) // eslint-disable-line
    }
  }

  if (url === project) return res.redirect(301, `${url}/`)

  const context = {
    url,
    title: '',
    keywords: '',
    description: '',
    query: req.query,
  }

  return renderer.renderToString(context, (err, html) => {
    let newHtml = html || ''

    if (err) {
      console.log(`[Error]"${url}": ${JSON.stringify(err)}`) // eslint-disable-line
      return handleError(err)
    }

    res.send(newHtml)

    console.log(`Sending html: --------\n${newHtml}\n--------\n`)

    return newHtml
  })
}

app.get('*', isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res))
})

const port = process.env.PORT || 8080
app.listen(port, () => {
  console.log(`server started at localhost:${port}`) // eslint-disable-line
})
